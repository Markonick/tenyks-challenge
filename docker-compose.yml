version: "3.9"
services:

  sdk:
    container_name: sdk
    build:
      context: .
      dockerfile: app/sdk/Dockerfile
    volumes:
      - ./app/sdk:/app/sdk
      - ./app/shared:/app/shared
      - ./dataset_data:/app/sdk/dataset_data
    environment:
      PSQL_USERNAME: ${PSQL_USERNAME}
      PSQL_HOSTNAME: ${PSQL_HOSTNAME}
      PSQL_PASSWORD: ${PSQL_PASSWORD}
      PSQL_DATABASE: ${PSQL_DATABASE}
      PSQL_SCHEMA: ${PSQL_SCHEMA}
      DOCKER_BUILDKIT: ${DOCKER_BUILDKIT}
    ports:
     - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: app/backend/Dockerfile
    volumes:
      - ./app/backend:/app/backend
      - ./app/shared:/app/shared
    environment:
      PSQL_USERNAME: ${PSQL_USERNAME}
      PSQL_HOSTNAME: ${PSQL_HOSTNAME}
      PSQL_PASSWORD: ${PSQL_PASSWORD}
      PSQL_DATABASE: ${PSQL_DATABASE}
      PSQL_SCHEMA: ${PSQL_SCHEMA}
      DOCKER_BUILDKIT: ${DOCKER_BUILDKIT}
    ports:
     - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy

  ml_extraction:
    container_name: ml_extraction
    build:
      context: .
      dockerfile: app/ml_extraction/Dockerfile
    volumes:
      - ./app/ml_extraction:/app/ml_extraction
      - ./app/shared:/app/shared
    environment:
      PSQL_USERNAME: ${PSQL_USERNAME}
      PSQL_HOSTNAME: ${PSQL_HOSTNAME}
      PSQL_PASSWORD: ${PSQL_PASSWORD}
      PSQL_DATABASE: ${PSQL_DATABASE}
      PSQL_SCHEMA: ${PSQL_SCHEMA}
      DOCKER_BUILDKIT: ${DOCKER_BUILDKIT}
    ports:
     - "8002:8000"
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    container_name: "postgres"
    image: "postgres:13-alpine"
    restart: "no"
    command: ["postgres", "-c", "log_statement=all"]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    ports:
      - "5432:5432"
    volumes:
      - ./app/sql/tenyks_schema.sql:/docker-entrypoint-initdb.d/tenyks_schema.sql
    environment:
      POSTGRES_USER: ${PSQL_USERNAME}
      PSQL_HOSTNAME: ${PSQL_HOSTNAME}
      POSTGRES_PASSWORD: ${PSQL_PASSWORD}
      PSQL_DATABASE: ${PSQL_DATABASE}
      SCHEMA: ${PSQL_SCHEMA}