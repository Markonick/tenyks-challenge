version: "3.9"
services:

  sdk:
    container_name: sdk
    build:
      context: .
      dockerfile: app/sdk/Dockerfile
    volumes:
      - ./app/sdk:/app/sdk
      - ./app/shared:/app/shared
      # - ./dataset_data:/app/sdk/dataset_data
    environment:
      PSQL_USERNAME: ${PSQL_USERNAME}
      PSQL_HOSTNAME: ${PSQL_HOSTNAME}
      PSQL_PASSWORD: ${PSQL_PASSWORD}
      PSQL_DATABASE: ${PSQL_DATABASE}
      # PSQL_SCHEMA: ${PSQL_SCHEMA}
      BACKEND_BASE_URL: ${BACKEND_BASE_URL}
      EXTRACT_BASE_URL: ${EXTRACT_BASE_URL}
      DOCKER_BUILDKIT: ${DOCKER_BUILDKIT}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      AWS_REGION: ${AWS_REGION}
      AWS_BUCKET: ${AWS_BUCKET}
      AWS_ENDPOINT: ${AWS_ENDPOINT}

    ports:
     - "8001:8000"
    depends_on:
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: app/backend/Dockerfile
    volumes:
      - ./app/backend:/app/backend
      - ./app/shared:/app/shared
    environment:
      PSQL_USERNAME: ${PSQL_USERNAME}
      PSQL_HOSTNAME: ${PSQL_HOSTNAME}
      PSQL_PASSWORD: ${PSQL_PASSWORD}
      PSQL_DATABASE: ${PSQL_DATABASE}
      # PSQL_SCHEMA: ${PSQL_SCHEMA}
      DOCKER_BUILDKIT: ${DOCKER_BUILDKIT}
    ports:
     - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy

  extraction:
    container_name: extraction
    build:
      context: .
      dockerfile: app/extraction/Dockerfile
    volumes:
      - ./app/extraction:/app/extraction
      - ./app/shared:/app/shared
      # - ./dataset_data:/app/extraction/dataset_data
    environment:
      PSQL_USERNAME: ${PSQL_USERNAME}
      PSQL_HOSTNAME: ${PSQL_HOSTNAME}
      PSQL_PASSWORD: ${PSQL_PASSWORD}
      PSQL_DATABASE: ${PSQL_DATABASE}
      # PSQL_SCHEMA: ${PSQL_SCHEMA}
      DOCKER_BUILDKIT: ${DOCKER_BUILDKIT}
      BACKEND_BASE_URL: ${BACKEND_BASE_URL}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      AWS_BUCKET: ${AWS_BUCKET}
      AWS_ENDPOINT: ${AWS_ENDPOINT}
      AWS_REGION: ${AWS_REGION}
    ports:
     - "8002:8000"
    depends_on:
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy

  postgres:
    container_name: "postgres"
    image: "postgres:13-alpine"
    restart: "no"
    command: ["postgres", "-c", "log_statement=all"]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${PSQL_USERNAME}
      PSQL_HOSTNAME: ${PSQL_HOSTNAME}
      POSTGRES_PASSWORD: ${PSQL_PASSWORD}
      PSQL_DATABASE: ${PSQL_DATABASE}

  minio:
    container_name: minio
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./dataset_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address :9001  # <-- add this
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minio:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    volumes:
      - ./dataset_data:/data
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set test http://minio:9000 minio minio123;
      /usr/bin/mc mb test/testbucket --region=us-east-1;
      /usr/bin/mc cp --recursive /data/ test/testbucket/;
      /usr/bin/mc policy set public test/testbucket;
      exit 0;
      "

# volumes:
#   postgres_data:
#   dataset_data: